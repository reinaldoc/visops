#!/bin/bash
# Writed by reinaldoc on 20220806

# User configuration
FILE_FORMAT=${VISOPS_FILE_FORMAT:-yaml}

# Internal vars
TEMPFILE="${1}.visops.tmp"
EDITOR=${EDITOR:-vi}

# Require SOPS command
sops >/dev/null 2>&1
test "${?}" != 100 && { echo "SOPS not available on PATH. Exiting..." ; exit 1; }

# Args validation
test -f "${1}" || { echo "This command require and accept only a file as argument. Exiting..."; exit 1; }

# SOPS file validation
grep -qE '^sops:$' "${1}" || { echo "The file '${1}' does't have SOPS signature. Exiting..."; exit 1; }

# Fingerprint validation
FP_COUNT=$(grep -E '^[ ]{10}fp:' "${1}" | uniq -c | wc -l)
test "${FP_COUNT}" -gt 1 && { echo "Visops doesn't works with a file encrypted with more then one public key. Sorry."; exit 1; }

# Set fingerprint
if [ -z "${VISOPS_FINGERPRINT}" ]; then
  VISOPS_FINGERPRINT=$(grep -E '^[ ]{10}fp:' "${1}" | head -n 1 | sed -re 's/.*fp: (.*)/\1/')
  if [ -z "${VISOPS_FINGERPRINT}" ]; then
    echo "Please, export \$VISOPS_FINGERPRINT with public key fingerprint. Exiting..."
    exit 1
  fi
fi

# encrypted_regex validation
REGEXP_COUNT=$(grep -E '^[ ]{4}encrypted_regex:' "${1}" | uniq -c | wc -l)
test "${REGEXP_COUNT}" -gt 1 && { echo "Visops doesn't works with a file encrypted with more then one regexp. Sorry."; exit 1; }

# Set encrypt regexp
SOPS_REGEXP=$(grep -E '^[ ]{4}encrypted_regex:' "${1}" | head -n 1 | sed -re 's/.*encrypted_regex: (.*)/\1/')

# Check lock file
test -f "${TEMPFILE}" && { echo "Temporary file '${TEMPFILE}' exists."; echo "Remove this lock file if no one is editing the file."; exit 1; }

# SOPS decrypt
sops --decrypt "${1}" > "${TEMPFILE}" 2>&1

# Succesful decrypt?
if [ "${?}" == 0 ] ; then
  ${EDITOR} "${TEMPFILE}"

  ERRORFILE="${TEMPFILE}.error"
  # SOPS encrypt
  sops --encrypt --in-place --input-type="${FILE_FORMAT}" --output-type="${FILE_FORMAT}" --encrypted-regex "${SOPS_REGEXP}" --pgp "${VISOPS_FINGERPRINT}" "${TEMPFILE}" > "${ERRORFILE}" 2>&1

  # Succesful encrypt?
  if [ "${?}" == 0 ] ; then
    mv "${TEMPFILE}" "${1}"
    test -f "${ERRORFILE}" && rm "${ERRORFILE}"
  else
    echo -e "\e[31mError encrypting edited file.\e[0m"
    echo -e "\e[33mError message available on '${ERRORFILE}'.\e[0m"
    echo -e "\e[33mWarning: Unecrypted edited file is available on '${TEMPFILE}'. Save your work and remove it.\e[0m"
  fi
  exit

# Failed decrypt
else
  echo -e "\e[31mError decrypting file '${1}'. Error message below.\e[0m"
  test -f "${TEMPFILE}" && { echo ; cat "${TEMPFILE}"; rm "${TEMPFILE}"; }
fi
